# 使用更小的基礎映像進行構建
FROM alpine:3.14 AS build

# 安裝必要的工具
RUN apk add --no-cache \
    g++ \
    openssl

# 創建目錄來存放應用程式
RUN mkdir -p /app

# 將我們的 C++ interpreter 的源碼添加到 Docker 映像中
ADD ./InterpreterOurScheme.cpp /app/InterpreterOurScheme.cpp
ADD ./InterpreterOurC.cpp /app/InterpreterOurC.cpp

# 編譯我們的 C++ interpreter
WORKDIR /app
RUN g++ -o InterpreterOurScheme InterpreterOurScheme.cpp
RUN g++ -o InterpreterOurC InterpreterOurC.cpp

# 使用更小的基礎映像進行運行
FROM node:14-alpine

# 創建目錄來存放應用程式
RUN mkdir -p /app

# 從構建階段複製編譯好的文件
COPY --from=build /app/InterpreterOurScheme /app/InterpreterOurScheme
COPY --from=build /app/InterpreterOurC /app/InterpreterOurC

# 將 Node.js 應用程式的源碼添加到 Docker 映像中
ADD ./server.js /app/server.js
ADD package.json /app/package.json
ADD package-lock.json /app/package-lock.json

# 設定工作目錄
WORKDIR /app

# 安裝 Node.js 的依賴
RUN npm install

# 安裝 pm2
RUN npm install -g pm2

# 設定檔案為唯執行
RUN chmod 111 /app/InterpreterOurScheme
RUN chmod 111 /app/InterpreterOurC

# 暴露你的應用程式使用的端口
EXPOSE 3000

# 當 Docker 容器啟動時，啟動我們的網頁伺服器，並根據可用的 CPU 核心數量來啟動多個實例（--instances max）
CMD ["pm2-runtime", "start", "server.js", "--instances", "max"]